lib = c(rep("Y",13),rep("N",13))
# This is a ratio scale. Since it is numeric.
# If these are considered to be strings, then it is a nominal scale.
## c) You will now create a dataframe of this data. Start by creating a vector
##    with participant IDs. Your vector should be named 'pid', and your
##    participants should be labeled from 1 to 26
pid <- c(seq(from = 1, to = 26, by = 1))
## d) Next, create a vector containing all the observations. Name this vector 'obs'.
obs <- c(18,	15,	18,	19,	23,	17,	18,	24,	17,	14,	16,	16,	17,	21,	22,	18,
20,	21,	20,	20, 16,	17,	17,	18,	20,	26)
## e) Create a dataframe including pid, obs and lib. Assign this to 'stories'.
stories <- data.frame(pid, obs, lib)
## f) Take a look at the summary of your dataframe, and at the classes of your
##    columns. What class are the variable 'pid' and 'lib'?
summary(stories)
class(stories$pid) # -> pid = numeric
class(stories$lib) # -> lib = character
## g) Change the class of 'pid' and 'lib' to factor. Why is factor a better
##     class for these variables? (answer for both separately)
# Factor is better for pid since we do not want to perform mathematical operations over pid (ex: taking the mean)
stories$pid <- as.factor(stories$pid)
# lib should be a factor, because there are only two values and we want
# to be able to count occurrences more easily
stories$lib <- as.factor(stories$lib)
## h) Create a boxplot of obs for the two lib groups
boxplot(obs ~ lib, data = stories, xlab = "Has a library card", ylab = "# of 'and then's")
## i) Are there outliers in one of the lib groups?
# "No" has one outlier (26) and "Yes" has two (23,24)
## j) Which group shows the larger interquartile range?
# "No" has the larger quantile range
## k) Which one has the greater overall range?
stories %>% group_by(lib) %>% summarize(max = max(obs), min = min(obs), med = median(obs), avg = mean(obs))
# Both of them have the same range (10)
## l) What is a whisker? Why is the upper whisker of group "Y" so short?
# The lines extending from the box. This line shows the largest/smallest
# value in the data set that is within the interquartile range.
# The upper whisker is short because the maximum value within 1.5*IQR is closer to the third quartile compared to
# the IQR.
## m) Compare the median of group Y with the mean - which one is plotted in your
##    boxplot? Why are they different?
# The box plot plots the median (50% quartile).
# The mean is sensitive to outliers which is why the median and mean are different.
install.packages("languageR")
treesHeight <- trees$Height
## g) Calculate the mean and standard deviation of treesHeight and plot a normal
##    distribution with these parameters (NB:you should not use the same x range
##    as above!)
m <- mean(treesHeight)
s <- sd(treesHeight)
plot(treesHeight, dnorm(treesHeight, mean = m, sd = s), type = "l")
avg <- mean(treesHeight)
std <- sd(treesHeight)
x <- seq(-4,4, 0.25) * std + avg
y <- dnorm(x, mean = avg, sd = std)
plot(x, y, type = "l")
head(lexdec)
library(languageR)
library(dplyr)
head(lexdec)
tail(lexdec)
summary(lexdec)
## e) Look at the first 15 rows of the data.frame
head(lexdec, 15)
## f) The file contains multiple observations for each participant. Create a
##   subset only including subject number M2 and assign it to M2
##   How many observations are there for this participant, i.e. how many rows
##   are in your subset?
M2 <- subset(lexdec, lexdec$Subject == "M2")
## g) looking at the summary of M2, what can you find out about the demographic
##    parameters of this participant?
summary(M2)
hist(M2$RT, main = "histogram for M2 - RT", breaks = 11)
## i) Create a kernel density plot for this data using density()
m2_d <- density(M2$RT)
lines(m2_d, lwd = 2, col = "red")
plot(density(M2$RT))
## k) Which one has the greater overall range?
stories %>% group_by(lib) %>% summarize(max = max(obs), min = min(obs), med = median(obs), avg = mean(obs))
library(lsr)
install.packages(lsr)
install.packages(tidyr)
install.packages(dplyr)
install.packages(ggplot2)
install.packages(languageR)
library(lsr)
install.packages("lsr")
install.packages("tidyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("languageR")
library(lsr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(languageR)
lex <- lexdec %>% select(Subject, Complex, RT, Sex, Frequency)
lex
head(lex)
## Run the following line to prepare the dataset for later steps:
lex = lex %>% mutate(Freq = as.factor(ifelse(Frequency > 4.75, "high", "low")))
## c. Look at the new variable. Describe how frequency was transformed and why.
lex$Freq
class(lex$Freq)
lex$Frequency
## Before we start testing, we want to get an impression of the data and create a barplot of
## the mean by Freq, including error bars that show the 95% CI.
## Here, we define a function to calculate the standard error, which is needed for the CI:
## (just execute the next line, as you will need the function in 2.)
se = function(x){sd(x)/sqrt(length(x))}
## Before we start testing, we want to get an impression of the data and create a barplot of
## the mean by Freq, including error bars that show the 95% CI.
## Here, we define a function to calculate the standard error, which is needed for the CI:
## (just execute the next line, as you will need the function in 2.)
se = function(x){sd(x)/sqrt(length(x))}
## Before we start testing, we want to get an impression of the data and create a barplot of
## the mean by Freq, including error bars that show the 95% CI.
## Here, we define a function to calculate the standard error, which is needed for the CI:
## (just execute the next line, as you will need the function in 2.)
se = function(x){sd(x)/sqrt(length(x))}
?group_by
?summarise
## d. To start, we need to summarize the data. Use the functions group_by() in combination with
##  summarise(). In particular, you need to group by Freq and get the mean as well as the
##  se of RT. Store the result to summaryByFreq
##  You will find examples of how the summarizing can be done here:
##  https://datacarpentry.org/R-genomics/04-dplyr.html#split-apply-combine_data_analysis_and_the_summarize()_function
summaryByFreq <- lex %>% group_by(Freq) %>% summarise(mean = mean(RT))
View(summaryByFreq)
## d. To start, we need to summarize the data. Use the functions group_by() in combination with
##  summarise(). In particular, you need to group by Freq and get the mean as well as the
##  se of RT. Store the result to summaryByFreq
##  You will find examples of how the summarizing can be done here:
##  https://datacarpentry.org/R-genomics/04-dplyr.html#split-apply-combine_data_analysis_and_the_summarize()_function
summaryByFreq <- lex %>% group_by(Freq) %>% summarise(mean = mean(RT), se = se(RT))
View(summaryByFreq)
?barplot
## f. Now use summaryByFreq to create the barplot with error bars denoting the 95% CI
##  (i.e. mean +/-1.96 * se)
ggplot(summaryByFreq, aes(x = Freq, y = mean))+geom_bar(position = position_dodge())+geom_errorbar(aes(ymin=-1.95*se, ymin=1.96*se))
## f. Now use summaryByFreq to create the barplot with error bars denoting the 95% CI
##  (i.e. mean +/-1.96 * se)
ggplot(summaryByFreq, aes(x = Freq, y = mean))+geom_bar(position = position_dodge())+geom_errorbar(aes(ymin=-1.95*se, ymax=1.96*se))
## f. Now use summaryByFreq to create the barplot with error bars denoting the 95% CI
##  (i.e. mean +/-1.96 * se)
ggplot(summaryByFreq, aes(x = Freq, y = mean))+geom_bar()+geom_errorbar(aes(ymin=-1.95*se, ymax=1.96*se))
## f. Now use summaryByFreq to create the barplot with error bars denoting the 95% CI
##  (i.e. mean +/-1.96 * se)
ggplot(summaryByFreq, aes(x = Freq, y = mean))+geom_bar(stat="identity",position = position_dodge())+geom_errorbar(aes(ymin=-1.95*se, ymax=1.96*se))
ggplot(summaryByFreq, aes(x = Freq, y = mean))
+geom_bar(stat="identity",position = position_dodge())
ggplot(summaryByFreq, aes(x = Freq, y = mean))
+geom_bar(stat="identity",position = position_dodge())
ggplot(summaryByFreq, aes(x = Freq, y = mean))+
geom_bar(stat="identity",position = position_dodge())+
geom_errorbar(aes(ymin=-1.95*se, ymax=1.96*se))+
theme_classic()
ggplot(summaryByFreq, aes(x = Freq, y = mean))+
geom_bar(stat="identity",position = position_dodge())+
geom_errorbar(aes(ymin=-1.95*se, ymax=1.96*se))
ggplot(summaryByFreq, aes(x = Freq, y = mean))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=-1.95*se, ymax=1.96*se))
ggplot(summaryByFreq, aes(x = Freq, y = mean)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = -1.95 * se, ymax = 1.96 * se),
width = 0.2,
position = position_dodge(0.9))
ggplot(summaryByFreq, aes(x = Freq, y = mean)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = (-1.95 * se), ymax = (1.96 * se)),
width = 0.2,
position = position_dodge(0.9))
ggplot(summaryByFreq, aes(x = Freq, y = mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin = (-1.95 * se), ymax = (1.96 * se)),
width = 0.2,
position = position_dodge(0.9))
ggplot(summaryByFreq, aes(x = Freq, y = mean)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
geom_errorbar(aes(ymin = mean-(1.95 * se), ymax = mean+(1.96 * se)),
width = 0.2,
position = position_dodge(0.9))
ggplot(summaryByFreq, aes(x = Freq, y = mean)) +
geom_bar(stat = "identity",
color = "black",
position = position_dodge()) +
geom_errorbar(aes(ymin = mean - (1.96 * se), ymax = mean + (1.96 * se)),
width = 0.2,
position = position_dodge(0.9))
ggplot(summaryByFreq, aes(x = Freq, y = mean)) +
geom_bar(stat = "identity",
color = "black",
position = position_dodge()) +
geom_errorbar(aes(ymin = mean - (1.96 * se), ymax = mean + (1.96 * se)),
width = 0.2,
position = position_dodge(0.9)) +
theme_classic()
ggplot(summaryByFreq, aes(x = Freq, y = mean)) +
geom_line() +
geom_errorbar(aes(ymin = mean - (1.96 * se), ymax = mean + (1.96 * se)),
width = 0.2,
position = position_dodge(0.9))
ggplot(summaryByFreq, aes(x = Freq, y = mean, group = 1)) +
geom_line() +
geom_errorbar(aes(ymin = mean - (1.96 * se), ymax = mean + (1.96 * se)),
width = 0.2,
position = position_dodge(0.9))
ggplot(summaryByFreq, aes(x = Freq, y = mean, group = 1)) +
geom_line() +
geom_point()+
geom_errorbar(aes(ymin = mean - (1.96 * se), ymax = mean + (1.96 * se)),
width = 0.2,
position = position_dodge(0.9))
bySubj <- lex %>% group_by(Subject, Freq) %>% summarise(mean=mean(RT))
head(bySubj)
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq, y = mean))+geom_histogram(position=position_dodge(), binwidth = 0.08)
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq, y = mean))+geom_histogram( binwidth = 0.08)
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq))+geom_histogram( binwidth = 0.08)
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq))+geom_histogram()
View(bySubj)
View(bySubj)
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq)) + geom_histogram(stat="count")
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq)) + geom_histogram(stat="mean")
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq)) + geom_histogram(stat="mean", binwidth = 0.08)
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq)) + geom_histogram(stat="count", binwidth = 0.08)
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = Freq)) + geom_histogram()
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = mean)) + geom_histogram()
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = mean_rt)) + geom_histogram()
bySubj <-
lex %>% group_by(Subject, Freq) %>% summarise(mean = mean(RT))
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = mean)) + geom_histogram()
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = mean, fill=Freq)) + geom_histogram()
## k. Create histograms of the RT data in bySubj depending on the frequency category
##  and display them side by side. Set the binwidth to 0.08
ggplot(bySubj, aes(x = mean, fill=Freq)) + geom_histogram(position=position_dodge(), binwidth = 0.08)
## l. Display the same data in density plots.
ggplot(bySubj, aes(x = mean, fill = Freq)) +
geom_density()
ggplot(bySubj, aes(x = mean, fill = Freq)) +
geom_boxplot()
ggplot(bySubj, aes(x = mean, fill = Freq)) +
geom_boxplot(fun.y=mean)
ggplot(bySubj, aes(x = Freq, y = mean)) +
geom_boxplot()
?spread
## a. Again, summarize the dataset to obtain the mean RT by "Subject" and "Complex" and transform
##  the dataset to a wide format.
##  In addition to group_by() and summarize(), you will need the function spread().
##  Assign the result to wide
wide <- lex %>% group_by(Subject, Complex) %>% summarise(mean = mean(RT))
View(wide)
View(wide)
## b. Compute a t-test on the wide format data - note that for wide-format
##  data you need to use a different syntax inside t.test()
t.test(wide$mean, wide$complex)
## b. Compute a t-test on the wide format data - note that for wide-format
##  data you need to use a different syntax inside t.test()
t.test(wide$mean, wide$Complex)
View(lex)
## b. Use again group_by and summarize to obtain by subject means of RT, but
## this time with regard to Sex and assign it to bySubjSex
## Perform the t-test you decided for.
bySubjSex <- ley %>% group_by(Sex) %>% summarise(mean = mean(RT))
## b. Use again group_by and summarize to obtain by subject means of RT, but
## this time with regard to Sex and assign it to bySubjSex
## Perform the t-test you decided for.
bySubjSex <- lex %>% group_by(Sex) %>% summarise(mean = mean(RT))
View(lex)
View(bySubjSex)
bySubjSex <- lex %>% group_by(Sex) %>% summarise(mean = mean(RT))
independentSamplesTTest(formula = Sex ~ mean, data = bySubjSex)
independentSamplesTTest(formula = mean ~ Sex, data = bySubjSex)
class(bySubjSex$mean)
class(bySubjSex$Sex)
ggplot(bySubjSex, aes(x = Sex, y = mean)) +
geom_boxplot()
ggplot(bySubjSex, aes(x = Sex, y = mean)) +
geom_histogram()
ggplot(bySubjSex, aes(x = Sex)) +
geom_histogram()
ggplot(bySubjSex, aes(x = Sex)) +
geom_histogram(stat="count")
ggplot(bySubjSex, aes(x = Sex, fill = Sex)) +
geom_histogram(stat="count")
ggplot(bySubj, aes(x = mean, fill = Freq)) +
geom_histogram(position = position_dodge(), binwidth = 0.08)
ggplot(bySubjSex, aes(x = Sex, fill = Sex)) +
geom_histogram(stat="count")
ggplot(bySubjSex, aes(x = Sex, fill = Sex)) +
geom_histogram(stat="identity")
ggplot(bySubjSex, aes(x = Sex, fill = Sex)) +
geom_histogram(stat="count")
ggplot(bySubjSex, aes(x = Sex, fill = Sex)) +
geom_histogram(stat="bin")
bySubjSex <- lex %>% group_by(Sex) %>% summarise(mean = mean(RT))
independentSamplesTTest(formula = mean ~ Sex, data = bySubjSex)
ggplot(bySubjSex, aes(x = Sex, y = mean, group = 1)) +
geom_line() +
geom_point()
## a. Generate 10 random samples from a normal distribution with mean 20 and sd 8 and save it in a variable
##  called "tutor1_grades"
tutor1_grades <- rt(n = 10, mean=20, sd = 8)
## a. Generate 10 random samples from a normal distribution with mean 20 and sd 8 and save it in a variable
##  called "tutor1_grades"
tutor1_grades <- rnorm(n = 10, mean=20, sd = 8)
## c. Combine the two samples and store the result into one vector called "score" (it should
##    first show all scores from tutor1 followed by the scores of tutor2)
score <- c(tutor1_grades, tutor2_grades)
tutor1_grades <- rnorm(n = 10, mean=20, sd = 8)
## b. Now we generate our second sample of size 10 ("tutor2_grades), this time for tutor 2
##  and with mean 28 and sd 10
tutor2_grades <- rnorm(n = 10, mean=28, sd = 10)
## c. Combine the two samples and store the result into one vector called "score" (it should
##    first show all scores from tutor1 followed by the scores of tutor2)
score <- c(tutor1_grades, tutor2_grades)
## d. Create a vector called tutor indicating which tutor the score belongs to: it should show
##   "tutor1" 10 times followed by "tutor2" 10 times
tutor <- rep(c(1,2), each = 10)
data_frame <- data.frame(tutor = tutor, score = score)
View(data_frame)
independentSamplesTTest(formula = mean ~ Sex, data = bySubjSex, var.equal = TRUE)
independentSamplesTTest(formula = score ~ tutor, data = data_frame, var.equal = TRUE)
## f. run the independent samples TTest (independentSamplesTTest) and formulate the findings as discussed
###  in the lecture.
independentSamplesTTest(formula = score ~ as.factor(tutor), data = data_frame, var.equal = TRUE)
tutor <- rep(c("tutor1","tutor2"), each = 10)
## e. Create a data frame named "data_frame" having 2 columns "tutor", "score" created above.
data_frame <- data.frame(tutor = tutor, score = score)
## f. run the independent samples TTest (independentSamplesTTest) and formulate the findings as discussed
###  in the lecture.
independentSamplesTTest(formula = score ~ as.factor(tutor), data = data_frame, var.equal = TRUE)
data_frame <- data.frame(tutor = tutor, score = score)
## f. run the independent samples TTest (independentSamplesTTest) and formulate the findings as discussed
###  in the lecture.
independentSamplesTTest(formula = score ~ tutor, data = data_frame, var.equal = TRUE)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
## f. run the independent samples TTest (independentSamplesTTest) and formulate the findings as discussed
###  in the lecture.
independentSamplesTTest(formula = score ~ tutor, data = data_frame, var.equal = TRUE)
size <- 20
for(size in seq(from = 15, to = 30, by = 5))
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean=20, sd = 8)
tutor2_grades <- rnorm(n = size, mean=28, sd = 10)
tutor <- rep(c("tutor1","tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor, data = data_frame, var.equal = TRUE)
size <- 20
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean=20, sd = 8)
tutor2_grades <- rnorm(n = size, mean=28, sd = 10)
tutor <- rep(c("tutor1","tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor, data = data_frame, var.equal = TRUE)
size <- 30
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean=20, sd = 8)
tutor2_grades <- rnorm(n = size, mean=28, sd = 10)
tutor <- rep(c("tutor1","tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor, data = data_frame, var.equal = TRUE)
size <- 40
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 50
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 60
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 55
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
size <- 70
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 30
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 30
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 100
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 110
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 120
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 130
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 150
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 20
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
size <- 30
set.seed(9273)
tutor1_grades <- rnorm(n = size, mean = 20, sd = 8)
tutor2_grades <- rnorm(n = size, mean = 28, sd = 10)
tutor <- rep(c("tutor1", "tutor2"), each = size)
data_frame <- data.frame(tutor = as.factor(tutor), score = score)
independentSamplesTTest(formula = score ~ tutor,
data = data_frame,
var.equal = TRUE)
