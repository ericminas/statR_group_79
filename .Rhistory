## please run the following line to convert the data into numeric
discoveries = as.numeric(discoveries)
## b) Take a look at the dataset using the table() function and histogram and boxplot.
table(discoveries)
hist(discoveries)
boxplot(discoveries)
## c) Compare mean and median of the dataset
mean(discoveries)
median(discoveries)
## c) Compare mean and median of the dataset
avg <- mean(discoveries)
med <- median(discoveries)
avg < med
?std
??std
?sd
norm_disc <- dnorm(length(discoveries), avg, sd(discoveries))
?dnorm
norm_disc <- dnorm(discoveries, avg, sd(discoveries))
## e) Make a histogram of norm_disc and compare this to the histogram of the original dataset from b
hist(norm_disc)
norm_disc <- rnorm(discoveries, avg, sd(discoveries))
## e) Make a histogram of norm_disc and compare this to the histogram of the original dataset from b
hist(norm_disc)
## g) Now, we are going to draw a smaller sample from discoveries.
### Use the function sample() to create a sample of four instances from discoveries
### assign it to sample4
sample4 <- sample(discoveries, 4)
## h) draw another 2 samples of 4 called sample4b and sample4c
sample4b <- sample(discoveries, 4)
sample4c <- sample(discoveries, 4)
## i) calculate the mean for each of the three samples and store them in the vector means4
means4 <- c(mean(sample4), mean(sample4b), mean(sample4c))
means4 <- numeric(1000)
for (i in 1:1000) {
samp <- sample(discoveries, 4)
means4[i] <- mean(samp)
}
means40 <- numeric(1000)
for (i in 1:1000) {
samp <- sample(discoveries, 40)
means40[i] <- mean(samp)
}
hist(means4)
hist(means40)
var(means4)
var(means40)
max(means4) - min(means4) > max(means40) - min(means40)
var(means4) > var(means40)
## b) please install and load packages sciplot and lsr
install("sciplot")
## b) please install and load packages sciplot and lsr
install.packages("sciplot")
install.packages("lsr")
## b) please install and load packages sciplot and lsr
# install.packages("sciplot")
# install.packages("lsr")
library(sciplot)
library(lsr)
## c) calculate 95% Confidence Intervals for discoveries, sample4 and sample4c. You can
##    use the function ciMean()
ciMean(discoveries)
ciMean(sample4)
ciMean(sample4c)
## e) Is the true mean contained in each interval?
mean(discoveries)
## e) Is the true mean contained in each interval?
# Theoretically, the intervals claim the true mean is contained in each of them with a probability of 95%
# Practically, the below code verifies this
ciMean(discoveries)[0] < mean(discoveries) & mean(discoveries) < ciMean(discoveries)[1]
## e) Is the true mean contained in each interval?
# Theoretically, the intervals claim the true mean is contained in each of them with a probability of 95%
# Practically, the below code verifies this
ciMean(discoveries)[0] < mean(discoveries) & (mean(discoveries) < ciMean(discoveries)[1])
## e) Is the true mean contained in each interval?
# Theoretically, the intervals claim the true mean is contained in each of them with a probability of 95%
# Practically, the below code verifies this
(ciMean(discoveries)[0] < mean(discoveries)) && (mean(discoveries) < ciMean(discoveries)[1])
ciMean(discoveries)[0] < mean(discoveries)
ciMean(discoveries)[0]
## e) Is the true mean contained in each interval?
# Theoretically, the intervals claim the true mean is contained in each of them with a probability of 95%
# Practically, the below code verifies this
(ciMean(discoveries)[1] < mean(discoveries)) && (mean(discoveries) < ciMean(discoveries)[1])
## e) Is the true mean contained in each interval?
# Theoretically, the intervals claim the true mean is contained in each of them with a probability of 95%
# Practically, the below code verifies this
(ciMean(discoveries)[1] < mean(discoveries)) && (mean(discoveries) < ciMean(discoveries)[2])
## f) In the following, we will check whether the CI behaves as expected.
##   What is the true mean in our example?
trueMean <- mean(discoveries)
## e) Is the true mean contained in each interval?
# Theoretically, the intervals claim the true mean is contained in each of them with a probability of 95%
# Practically, the below code verifies this
ciMean(discoveries)[1] < mean(discoveries) && mean(discoveries) < ciMean(discoveries)[2]
TrueMeanContained <- numeric(1000)
for (i in 1:1000) {
samp <- sample(discoveries, 40)
ciSamp <- ciMean(samp)
TrueMeanContained[i] <- ciSamp[1] < trueMean && trueMean < ciSamp[2]
}
## h) Given your results in TrueMeanContained, you now need to check, whether the interval really contains
##   the mean 95% of the time. Does it?
sum(TrueMeanContained)/1000
str(chickwts)
## i) Confidence intervals are often used in plots. Lets construct a barplot with confidence intervals for
## the dataset chickwts, which contains weight of chickens after being administered different kinds of
## food for 6 weeks.
## Use the function bargraph.CI to plot weight by feed, using the arguments response and x.factor
bargraph.CI(x.factor = chickwts$feed, response = chichwts$weight)
## i) Confidence intervals are often used in plots. Lets construct a barplot with confidence intervals for
## the dataset chickwts, which contains weight of chickens after being administered different kinds of
## food for 6 weeks.
## Use the function bargraph.CI to plot weight by feed, using the arguments response and x.factor
bargraph.CI(x.factor = chickwts$feed, response = chickwts$weight)
?bargraph.CI
## i) Confidence intervals are often used in plots. Lets construct a barplot with confidence intervals for
## the dataset chickwts, which contains weight of chickens after being administered different kinds of
## food for 6 weeks.
## Use the function bargraph.CI to plot weight by feed, using the arguments response and x.factor
bargraph.CI(x.factor = chickwts$feed, response = chickwts$weight, xlab = "Feed", ylab = "Weight")
## j) Now additionally set the optional argument ci.fun to ciMean. How does the graph change and why?
##  Hint: Look into the documentation of bargraph.CI.
bargraph.CI(x.factor = chickwts$feed, response = chickwts$weight, xlab = "Feed", ylab = "Weight", ci.fun = ciMean)
?bargraph.CI
## a) We will not use data from a normal distribution, but work with the poisson distribution, which is
## often used for count data. We will use the dataset discoveries, please find out what it is about
?discoveries
str(discoveries)
avg <- mean(discoveries)
med <- median(discoveries)
avg > med
norm_disc <- rnorm(discoveries, avg, sd(discoveries))
norm_disc <- rnorm(100, avg, sd(discoveries))
norm_disc <- rnorm(discoveries, avg, sd(discoveries))
sample4 <- sample(discoveries, 4)
## h) draw another 2 samples of 4 called sample4b and sample4c
sample4b <- sample(discoveries, 4)
sample4c <- sample(discoveries, 4)
## i) calculate the mean for each of the three samples and store them in the vector means4
means4 <- c(mean(sample4), mean(sample4b), mean(sample4c))
## a. Load the libraries stringr, dplyr, tidyr and forcats
library(stringr)
## a. Load the libraries stringr, dplyr, tidyr and forcats
install.packages("strigr")
library(stringr)
## a. Load the libraries stringr, dplyr, tidyr and forcats
install.packages("stringr")
## a. Load the libraries stringr, dplyr, tidyr and forcats
install.packages("stringr", "dplyr", "tidyr", "forcats")
install.packages("dplyr")
install.packages("tidyr")
install.packages("forcats")
library(stringr)
library(dplyr)
library(tidyr)
library(forcats)
## b. read in the data
getwd()
data <- read.csv('insomnia.csv')
data <- read.csv('insomnia22.csv')
#
## c. get a summary of the dataset
summary(data)
str(data)
head(data)
table(data)
head(data)
## d. the variable sleepProblem should be a numerical variable and have 0 for no Problem
##    and 1 for sleep problems.
##    Make sure that this is the case
str(data)
## d. the variable sleepProblem should be a numerical variable and have 0 for no Problem
##    and 1 for sleep problems.
##    Make sure that this is the case
data$sleepProblem <- as.factor(data$sleepProblem)
str(data)
data <- read.csv('insomnia22.csv')
View(data)
View(data)
## d. the variable sleepProblem should be a numerical variable and have 0 for no Problem
##    and 1 for sleep problems.
##    Make sure that this is the case
data$sleepProblem <- as.factor(data$sleepProblem)
## e. how many students encounter sleep problems?
table(data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "no", 0)
## e. how many students encounter sleep problems?
table(data$sleepProblem)
?ifelse
data$sleepProblem <- ifelse(data$sleepProblem == "no", 0,
ifelse(data$sleepProblem == "yes" || data$sleepProblem == 11, 1, data$sleepProblem))
## e. how many students encounter sleep problems?
table(data$sleepProblem)
data <- read.csv('insomnia22.csv')
data$sleepProblem <- ifelse(data$sleepProblem == "no", "0",
ifelse(data$sleepProblem == "yes" || data$sleepProblem == "11", "1", data$sleepProblem))
data$sleepProblem <- as.factor(data$sleepProblem)
## e. how many students encounter sleep problems?
table(data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "no" || data$sleepProblem == "0", "0",
ifelse(data$sleepProblem == "yes" || data$sleepProblem == "11", "1", data$sleepProblem))
?replace
data$sleepProblem <- ifelse(data$sleepProblem == "no", "0", data$sleepProblem)
data <- read.csv('insomnia22.csv')
data$sleepProblem <- ifelse(data$sleepProblem == "no", "0", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "yes", "1", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "11", "1", data$sleepProblem)
data$sleepProblem <- as.factor(data$sleepProblem)
## e. how many students encounter sleep problems?
table(data$sleepProblem)
str(data)
data$sleepProblem <- as.numeric(data$sleepProblem)
data <- read.csv('insomnia22.csv')
#
## c. get a summary of the dataset
summary(data)
str(data)
head(data)
## d. the variable sleepProblem should be a numerical variable and have 0 for no Problem
##    and 1 for sleep problems.
##    Make sure that this is the case
str(data)#
data$sleepProblem <- ifelse(data$sleepProblem == "no", "0", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "yes", "1", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "11", "1", data$sleepProblem)
data$sleepProblem <- as.numeric(data$sleepProblem)
## e. how many students encounter sleep problems?
table(data$sleepProblem)
str(data)
## f. how many different drinks do students name? (transform the variable into a
## factor first)
data$drink <- as.factor(data$drink)
table(data$drink)
?tolower
?stringr
## g. collapse factor levels which were spelled wrong. Make sure you first handle
## case and whitespace incongruencies, before you fix individual misspellings
data$drink <- gsub(" ", "", data$drink.toLowerCase())
## g. collapse factor levels which were spelled wrong. Make sure you first handle
## case and whitespace incongruencies, before you fix individual misspellings
data$drink <- gsub(" ", "", data$drink)
View(data)
View(data)
table(data$drink)
data$drink <- data$drink.toLower()
data$drink <- data$drink.toLowerCase()
data$drink <- toLowerCase(data$drink)
?toLowerCase
data$drink <- str_to_lower(data$drink)
table(data$drink)
data <- read.csv('insomnia22.csv')
#
## c. get a summary of the dataset
summary(data)
str(data)
head(data)
## d. the variable sleepProblem should be a numerical variable and have 0 for no Problem
##    and 1 for sleep problems.
##    Make sure that this is the case
str(data)#
data$sleepProblem <- ifelse(data$sleepProblem == "no", "0", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "yes", "1", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "11", "1", data$sleepProblem)
data$sleepProblem <- as.numeric(data$sleepProblem)
## e. how many students encounter sleep problems?
table(data$sleepProblem) # 25 students encounter sleep problems
## f. how many different drinks do students name? (transform the variable into a
## factor first)
data$drink <- as.factor(data$drink)
table(data$drink) # there are 3 different drinks
## g. collapse factor levels which were spelled wrong. Make sure you first handle
## case and whitespace incongruencies, before you fix individual misspellings
data$drink <- gsub(" ", "", str_to_lower(data$drink))
table(data$drink)
data$drink <- str_replace(data$drink, "tee", "tea")
table(data$drink)
data$drink <- str_replace(data$drink, "tee", "tea")
data$drink <- str_replace(data$drink, "koffee", "coffee")
data$drink <- str_replace(data$drink, "coffe", "coffee")
data$drink <- str_replace(data$drink, "cofee", "coffee")
table(data$drink)
data$drink <- str_replace(data$drink, "coffeee", "coffee")
table(data$drink)
## You realize that most students had multiple exams in the week from Feb 22 to
## Feb 26. As students had to learn a lot and were possibly worried, they might
## misjudge or exaggerate their sleep problems as occurring "regularly"
## We want to exclude all data that was collected between and including Feb 15
## and Feb 26!
str(data)
## You realize that most students had multiple exams in the week from Feb 22 to
## Feb 26. As students had to learn a lot and were possibly worried, they might
## misjudge or exaggerate their sleep problems as occurring "regularly"
## We want to exclude all data that was collected between and including Feb 15
## and Feb 26!
data$date <- as.Date(data$date)
?subset
clean_data <- data %>% filter(date < "2021-02-22" || date > "2021-02-26")
View(clean_data)
str(data)
lb <- as.Date("2021-02-22")
ub <- as,Date("2021-02-26")
ub <- as.Date("2021-02-26")
clean_data <- data %>% filter(date < lb || date > ub)
clean_data <- data %>% filter(date < lb)
clean_data <- data %>% filter(date < lb | date > ub)
View(clean_data)
View(clean_data)
View(data)
View(data)
View(data)
View(data)
data <- read.csv('insomnia22.csv')
View(data)
View(data)
data$sleepProblem <- ifelse(data$sleepProblem == "no", "0", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "yes", "1", data$sleepProblem)
data$sleepProblem <- ifelse(data$sleepProblem == "11", "1", data$sleepProblem)
data$sleepProblem <- as.numeric(data$sleepProblem)
## e. how many students encounter sleep problems?
table(data$sleepProblem) # 25 students encounter sleep problems
data$drink <- as.factor(data$drink)
table(data$drink) # there are 3 different drinks
## g. collapse factor levels which were spelled wrong. Make sure you first handle
## case and whitespace incongruencies, before you fix individual misspellings
data$drink <- gsub(" ", "", str_to_lower(data$drink))
data$drink <- str_replace(data$drink, "tee", "tea")
data$drink <- str_replace(data$drink, "koffee", "coffee")
data$drink <- str_replace(data$drink, "coffe", "coffee")
data$drink <- str_replace(data$drink, "cofee", "coffee")
data$drink <- str_replace(data$drink, "coffeee", "coffee")
table(data$drink)
## and Feb 26!
data$date <- as.Date(data$date)
str(data)
lb <- as.Date("2021-02-22")
ub <- as.Date("2021-02-26")
clean_data <- data %>% filter(date < lb | date > ub)
?chisq.test
## b. conduct a chisquare test to test this hypothesis using the function chisq.test()
##    and assign the result to chi
chi <- chisq.test(clean$drink, clean$sleepProblem)
clean <- data %>% filter(date < lb | date > ub)
## b. conduct a chisquare test to test this hypothesis using the function chisq.test()
##    and assign the result to chi
chi <- chisq.test(clean$drink, clean$sleepProblem)
View(chi)
## d. What are the expected frequencies? Do we need to look at expected or
##    observed frequencies?
chi$expected
# We look at the observed frequencies as that corresponds to our data
chi$observed
?fisher.test
fisher.test(clean$drink, clean$sleepProblem)
## a) What is the chance in a single roll of earning a point?
p <- 2/6
?dbinom
## b) Please calculate the probability of getting exactly 3 points.
##    Calculate this using the dbinom() function.
dbinom(size = 20, prob = p)
## b) Please calculate the probability of getting exactly 3 points.
##    Calculate this using the dbinom() function.
dbinom(3, size = 20, prob = p)
## c) Next please calculate the probability of getting less than 6 points
dbinom(6, 20, p, lower.tail = FALSE)
?pbinom
## c) Next please calculate the probability of getting less than 6 points
pbinom(6, 20, p, lower.tail = FALSE)
## c) Next please calculate the probability of getting less than 6 points
pbinom(6, 20, p, lower.tail = TRUE) # 52%
## a) Can you use the ChiSquare test in this situation? Explain and motivate
##  your answer
# No, this will not work as our observations are not independent.
clean
## a) Can you use the ChiSquare test in this situation? Explain and motivate
##  your answer
# No, this will not work as our observations are not independent.
hist(clean)
## a) Can you use the ChiSquare test in this situation? Explain and motivate
##  your answer
# No, this will not work as our observations are not independent.
hist(clean$drink)
## a) Can you use the ChiSquare test in this situation? Explain and motivate
##  your answer
# No, this will not work as our observations are not independent.
hist(as.numeric(clean$drink))
