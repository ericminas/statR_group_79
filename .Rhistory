## e) Create a dataframe including pid, obs and lib. Assign this to 'stories'.
stories <- data.frame(pid, obs, lib)
## f) Take a look at the summary of your dataframe, and at the classes of your
##    columns. What class are the variable 'pid' and 'lib'?
summary(stories)
class(stories$pid) # -> pid = numeric
class(stories$lib) # -> lib = character
## g) Change the class of 'pid' and 'lib' to factor. Why is factor a better
##     class for these variables? (answer for both separately)
# Factor is better for pid since we do not want to perform mathematical operations over pid (ex: taking the mean)
stories$pid <- as.factor(stories$pid)
# lib should be a factor, because there are only two values and we want
# to be able to count occurrences more easily
stories$lib <- as.factor(stories$lib)
## h) Create a boxplot of obs for the two lib groups
boxplot(obs ~ lib, data = stories, xlab = "Has a library card", ylab = "# of 'and then's")
## i) Are there outliers in one of the lib groups?
# "No" has one outlier (26) and "Yes" has two (23,24)
## j) Which group shows the larger interquartile range?
# "No" has the larger quantile range
## k) Which one has the greater overall range?
stories %>% group_by(lib) %>% summarize(max = max(obs), min = min(obs), med = median(obs), avg = mean(obs))
# Both of them have the same range (10)
## l) What is a whisker? Why is the upper whisker of group "Y" so short?
# The lines extending from the box. This line shows the largest/smallest
# value in the data set that is within the interquartile range.
# The upper whisker is short because the maximum value within 1.5*IQR is closer to the third quartile compared to
# the IQR.
## m) Compare the median of group Y with the mean - which one is plotted in your
##    boxplot? Why are they different?
# The box plot plots the median (50% quartile).
# The mean is sensitive to outliers which is why the median and mean are different.
install.packages("languageR")
treesHeight <- trees$Height
## g) Calculate the mean and standard deviation of treesHeight and plot a normal
##    distribution with these parameters (NB:you should not use the same x range
##    as above!)
m <- mean(treesHeight)
s <- sd(treesHeight)
plot(treesHeight, dnorm(treesHeight, mean = m, sd = s), type = "l")
avg <- mean(treesHeight)
std <- sd(treesHeight)
x <- seq(-4,4, 0.25) * std + avg
y <- dnorm(x, mean = avg, sd = std)
plot(x, y, type = "l")
head(lexdec)
library(languageR)
library(dplyr)
head(lexdec)
tail(lexdec)
summary(lexdec)
## e) Look at the first 15 rows of the data.frame
head(lexdec, 15)
## f) The file contains multiple observations for each participant. Create a
##   subset only including subject number M2 and assign it to M2
##   How many observations are there for this participant, i.e. how many rows
##   are in your subset?
M2 <- subset(lexdec, lexdec$Subject == "M2")
## g) looking at the summary of M2, what can you find out about the demographic
##    parameters of this participant?
summary(M2)
hist(M2$RT, main = "histogram for M2 - RT", breaks = 11)
## i) Create a kernel density plot for this data using density()
m2_d <- density(M2$RT)
lines(m2_d, lwd = 2, col = "red")
plot(density(M2$RT))
## k) Which one has the greater overall range?
stories %>% group_by(lib) %>% summarize(max = max(obs), min = min(obs), med = median(obs), avg = mean(obs))
install.packages("MASS")
install.packages("tidyr")
library(ggplot2)
library(dplyr)
library(MASS)
library(car)
library(tidyr)
data <- MASS::anorexia
summary(data);
ggplot(data)
ggplot(data, aes(CBT, FT))
ggplot(data, aes(CBT, FT, fill = Cont))+geom_point()
View(data)
View(data)
ggplot(data, aes(Treat, Prewt, fill = Postwt))+geom_point()
ggplot(data, aes(Postwt, Prewt, fill = Treat))+geom_point()
ggplot(data, aes(Postwt, Prewt, shape = Treat))+geom_point()
ggplot(data, aes(Prewt, Postwt, shape = Treat))+geom_point()
ggplot(data, aes(Prewt, Postwt, shape = Treat, size = 5))+geom_point()
ggplot(data, aes(Prewt, Postwt, shape = Treat, size = 3))+geom_point()
ggplot(data, aes(Prewt, Postwt, shape = Treat, size = 2))+geom_point()
## c) Build a boxplot of Postwt depending on "Treat". Please use ggplot here and below!
ggplot(data, aes(Treat, Postwt)) + geom_boxplot()
## e) Now we are ready to perform 1-way ANOVA: please use the function aov() on
## Postwt depending on Treat and assign the result to aov1way
aov1way<-aov(Treat ~ Postwt, data = data)
## e) Now we are ready to perform 1-way ANOVA: please use the function aov() on
## Postwt depending on Treat and assign the result to aov1way
aov1way<-aov(Postwt ~ Treat, data = data)
View(aov1way)
View(aov1way)
## f) Independence assumption
## (Figure out the best way to check this assumption and give a detailed justified
## answer to whether it is violated or not.)
# Slide 32 => no repeated measures
duplicated(data)
## f) Independence assumption
## (Figure out the best way to check this assumption and give a detailed justified
## answer to whether it is violated or not.)
# Slide 32 => no repeated measures
reduce(f = "|",x = duplicated(data))
## f) Independence assumption
## (Figure out the best way to check this assumption and give a detailed justified
## answer to whether it is violated or not.)
# Slide 32 => no repeated measures
reduce(f = "||",x = duplicated(data))
## f) Independence assumption
## (Figure out the best way to check this assumption and give a detailed justified
## answer to whether it is violated or not.)
# Slide 32 => no repeated measures
reduce(f = function(acc, val) {acc | val},x = duplicated(data))
## f) Independence assumption
## (Figure out the best way to check this assumption and give a detailed justified
## answer to whether it is violated or not.)
# Slide 32 => no repeated measures
reduce(f = function(acc, val) {acc | val},x = duplicated(data))
## f) Independence assumption
## (Figure out the best way to check this assumption and give a detailed justified
## answer to whether it is violated or not.)
# Slide 32 => no repeated measures
reduce(duplicated(data), function(acc, val) {acc | val})
#install.packages("tidyr")
install.packages("purrr")
install.packages("purrr")
library(purrr)
## f) Independence assumption
## (Figure out the best way to check this assumption and give a detailed justified
## answer to whether it is violated or not.)
# Slide 32 => no repeated measures
reduce(duplicated(data), function(acc, val) {acc | val})
## g) Normality of residuals (figure out the best way to check this assumption)
# use the shapiro test on the residuals that were calculated
summary(avo1way)
## g) Normality of residuals (figure out the best way to check this assumption)
# use the shapiro test on the residuals that were calculated
summary(aov1way)
aov1way["Residuals"]
aov1way[,"Residuals"]
aov1way$Residuasls
aov1way$Residuals
str(aov1way$Residuals)
str(aov1way$Residuals)
summary(aov1way)
str(aov1way$Residuals)
str(aov1way$residuals)
aov1way$residuals
## g) Normality of residuals (figure out the best way to check this assumption)
# use the shapiro test on the residuals that were calculated
shapiro.test(aov1way$residuals)
## i) Homogeneity of variance of residuals (figure out the best way to check this assumption)
bartlett.test(Postwt ~ Treat, data = data)
## l) Now we turn to the results. Look at the summary of aov1way
summary(aov1way)
## n) Use paired.t.test in order to test which levels of Treat are actually different. Use
## "bonferroni" as the method of p-value adjustment.
paired.t.test(data$Postwt, data$Treat, p.adjust.method = "bonferroni")
## n) Use paired.t.test in order to test which levels of Treat are actually different. Use
## "bonferroni" as the method of p-value adjustment.
pairwise.t.test(data$Postwt, data$Treat, p.adjust.method = "bonferroni")
## o) Bonferroni is known to be a conservative method: it preserves the nominal alpha level,
##  but lacks power to detect effects. An alternative is the "holm" method, which also
##  preserves the overall alpha level, but is less conservative. Try this method.
pairwise.t.test(data$Postwt, data$Treat, p.adjust.method = "holm")
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat, Prewt))+geom_boxplot()
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat, Prewt))+geom_line()
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat, Prewt))+geom_line()+geom_hline(data =data$Postwt)
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat, Prewt)) + geom_bar()
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat, Prewt)) + geom_hist()
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat, Prewt)) + geom_histogram()
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat)) + geom_histogram()
ggplot(data, aes(x = Treat, y = value, color = variable, group = variable))+ geom_line()+ scale_color_manual(values=c("y1"="black","y2"="red","y3"="orange")) +
scale_linetype_manual(values=c("y1"="solid","y2"="solid","y3"="dashed"))
ggplot(data, aes(x = Treat, y = value, color = variable, group = variable))+
geom_line()+
scale_color_manual(values=c("y1"="black","y2"="red","y3"="orange")) +
scale_linetype_manual(values=c("y1"="solid","y2"="solid","y3"="dashed"))
aes(x = Treat, y = value, color = variable, group = variable))+
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(x = Treat, y = value, color = variable, group = variable))+
geom_line()#+
geom_line(aes(y = Prewt, colour = "blue")) +
geom_line(aes(y = Postwt, colour = "green"))
## a) Create a graph to see whether prewt is similar between Treat groups.
ggplot(data, aes(Treat)) +
geom_line(aes(y = Prewt, colour = "blue")) +
geom_line(aes(y = Postwt, colour = "green"))
ggplot(data, aes(Treat)) +
geom_line(aes(y = Prewt, colour = "blue")) +
geom_line(aes(y = Postwt, colour = "green")) +
coord_flip()
data_long <- pivot_longer(data, cols = c("Prewt", "Postwt"))
ggplot(data=data_long,
aes(x=Treat, y=value, colour=name)) +
geom_line()
## a) Create a graph to see whether prewt is similar between Treat groups.
data_graph <- data %>% group_by(Treat) %>% summarise(mean_pre_wt = mean(Prewt), mean_post_wt = mean(Postwt))
## a) Create a graph to see whether prewt is similar between Treat groups.
data_graph <- data %>% group_by(Treat) %>% summarise(mean_pre_wt = mean(Prewt), mean_post_wt = mean(Postwt))
ggplot(data, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = "blue")) +
geom_point(aes(y = mean_post_wt, color = "red"))
data_graph <- data %>% group_by(Treat) %>% summarise(mean_pre_wt = mean(Prewt), mean_post_wt = mean(Postwt))
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = "blue")) +
geom_point(aes(y = mean_post_wt, color = "red"))
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = "blue", size = 3)) +
geom_point(aes(y = mean_post_wt, color = "red", size = 3))
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = "blue", size = 3)) +
geom_point(aes(y = mean_post_wt, color = "red", size = 3)) +
labs(y = "weight in kg", x = "Treatment")
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = "blue", size = 3)) +
geom_point(aes(y = mean_post_wt, color = "red", size = 3)) +
labs(y = "weight in kg", x = "Treatment", colour = "test")
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = mean_pre_wt, size = 3)) +
geom_point(aes(y = mean_post_wt, color = mean_post_wt, size = 3)) +
labs(y = "weight in kg", x = "Treatment")
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = "blue", size = 3)) +
geom_point(aes(y = mean_post_wt, color = "red", size = 3)) +
labs(y = "weight in kg", x = "Treatment")
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = variable, size = 3)) +
geom_point(aes(y = mean_post_wt, color = variable, size = 3)) +
labs(y = "weight in kg", x = "Treatment")
ggplot(data_graph, aes(Treat)) +
geom_point(aes(y = mean_pre_wt, color = "blue", size = 3)) +
geom_point(aes(y = mean_post_wt, color = "red", size = 3)) +
labs(y = "weight in kg", x = "Treatment") +
scale_color_manual(labels = c("pre-treatment weight", "post-treatment weight"), values = c("blue", "red"))
data_long = anorexia%>% pivot_longer(c(Postwt,Prewt), names_to = "Time", values_to = "Weight") %>%
mutate(Time = factor(Time, levels=c("Prewt","Postwt")))
summary(data_long)
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat, y = Time))+geom_boxplot()
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat))+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight, position="dodge"))
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat))+geom_boxplot(aes(y = Time, position="dodge"))+geom_boxplot(aes(y = Weight, position="dodge"))
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat))+geom_boxplot(aes(y = Time, position=position_dodge()))+geom_boxplot(aes(y = Weight, position=position_dodge()))
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat))+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight))
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat))+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight), ncol = 3)
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat))+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight), ncol = 3, nrow=2)
## c) Plot boxplots for the distribution of `Weight` for each of the `Time`
## values for data_long. Build 3 plots (each containing 2 boxplots) side by side depending on the
## `Treat` variable.
ggplot(data_long, aes(x = Treat),ncol = 3, nrow=2)+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight))
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Treat))+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight))
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Treat))+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight))+scale_y_continuous(name = "Time", sec.axis = sec_axis(~*0.1, name = "weight"))
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Treat))+geom_boxplot(aes(y = Time))+geom_boxplot(aes(y = Weight))+scale_y_continuous(name = "Time", sec.axis = sec_axis(~.*0.1, name = "weight"))
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Treat)) +
geom_boxplot(aes(y = Time)) +
geom_boxplot(aes(y = Weight)) +
scale_y_continuous(name = "Time", sec.axis = sec_axis(name = "weight"))
summary(data_long)
table(data_long$Time)
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Treat)) +
geom_boxplot(aes(y = Time)) +
geom_boxplot(aes(y = Weight)) +
scale_y_continuous(name = "Time", sec.axis = sec_axis(~.*1,name = "weight"))
View(data_long)
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Treat, y = Time)) +
#  geom_boxplot(aes(y = Time)) +
geom_boxplot(aes(y = Weight)) +
scale_y_continuous(name = "Time", sec.axis = sec_axis(~.*1,name = "weight"))
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Treat, y = Time)) +
#  geom_boxplot(aes(y = Time)) +
geom_boxplot(aes(y = Weight))
ggplot(data_long %>% filter(Treat == "CBT"), aes(x = Time, y = Weight)) +
geom_boxplot()
ggplot(data_long, aes(x = Time, y = Weight)) +
geom_boxplot(data =data_long %>% filter(Treat == "CBT") )
ggplot(data_long, aes(x = Time, y = Weight)) +
geom_boxplot(data =data_long %>% filter(Treat == "CBT") )+
geom_boxplot(data =data_long %>% filter(Treat == "Cont") )+
geom_boxplot(data =data_long %>% filter(Treat == "FT") )
ggplot(data_long, aes(x = Time, y = Weight), ncol = 3) +
geom_boxplot(data =data_long %>% filter(Treat == "CBT") )+
geom_boxplot(data =data_long %>% filter(Treat == "Cont") )+
geom_boxplot(data =data_long %>% filter(Treat == "FT") )
ggplot(data_long, aes(x = Time, y = Weight), ncol = 3) +
geom_boxplot(data =data_long %>% filter(Treat == "CBT") , position = position_dodge() )+
geom_boxplot(data =data_long %>% filter(Treat == "Cont"), position = position_dodge() )+
geom_boxplot(data =data_long %>% filter(Treat == "FT") , position = position_dodge() )
ggplot(data_long, aes(x = Time, y = Weight), ncol = 3) +
geom_boxplot(data =data_long %>% filter(Treat == "CBT") , position = position_dodge(0.9) )+
geom_boxplot(data =data_long %>% filter(Treat == "Cont"), position = position_dodge(0.9) )+
geom_boxplot(data =data_long %>% filter(Treat == "FT") , position = position_dodge(0.9) )
ggplot(data_long, aes(x = Time, y = Weight), ncol = 3) +
geom_boxplot(data = data_long %>% filter(Treat == "CBT")) +
geom_boxplot(data = data_long %>% filter(Treat == "Cont")) +
geom_boxplot(data = data_long %>% filter(Treat == "FT")) +
facet_grid(rows = 1, cols = 3)
ggplot(data_long, aes(x = Time, y = Weight), ncol = 3) +
# geom_boxplot(data = data_long %>% filter(Treat == "CBT")) +
#  geom_boxplot(data = data_long %>% filter(Treat == "Cont")) +
#  geom_boxplot(data = data_long %>% filter(Treat == "FT")) +
facet_grid( cols = vars(Treat))
ggplot(data_long, aes(x = Time, y = Weight), ncol = 3) +
geom_boxplot(data = data_long %>% filter(Treat == "CBT")) +
geom_boxplot(data = data_long %>% filter(Treat == "Cont")) +
geom_boxplot(data = data_long %>% filter(Treat == "FT")) +
facet_grid( cols = vars(Treat))
## e) build a two-way ANOVA including Time and Treat as predictors and their interaction
##  and assign it to aov2way.
aov2way <- aov(Weight ~ Time * Treat, data = data_long)
summary(aov2way)
## g) In order to evaluate the interaction, we will use pairwise tests again. The
## function, we are going to use here is TukeyHSD. Please call the function on the
##  two-way anova
TukeyHSD(aov2way)
rm(list = ls())
library(carData)
data <- carData::Salaries;
## b) Run a simple regression, just including 'years since PhD' as predictor and salary as the dependent variable
##  Store it in lm1
lm1 <- lm(yrs.since.phd ~ salary, data = data)
## c) Report and explain the effect of 'years since PhD'
summary(lm1)
## c) Report and explain the effect of 'years since PhD'
aov(yrs.since.phd ~ salary, data = data)
## c) Report and explain the effect of 'years since PhD'
anova(lm1)
## c) Report and explain the effect of 'years since PhD'
summary(lm1)
summary(lm1)
anova(lm1)
lm1 <- lm(salary ~ yrs.since.phd, data = data)
## c) Report and explain the effect of 'years since PhD'
summary(lm1)
anova(lm1)
ggplot(lm1)+geom_line()
########
### Please, use ggplot to make plots in all exercises unless specified differently!
########
library(ggplot2)
ggplot(lm1)+geom_line()
ggplot(data, aes(salary, yrs.since.phd))+geom_line()
ggplot(data, aes(salary, yrs.since.phd))+geom_point()
ggplot(data, aes(salary, yrs.since.phd))+geom_point()+geom_line(data = lm1)
ggplot(data, aes(salary, yrs.since.phd))+geom_point()+geom_smooth(method="lm", formula =salary ~ yrs.since.phd )
##  Next we want to plot a model where both predictors are shown. For those we first store the predicted values
## of our model:
data$sal_pred = fitted(lm2)
ggplot(data, aes(salary, yrs.since.phd)) +
geom_point() +
stat_summary(fun.data =mean_cl_normal) +
geom_smooth(method = "lm", formula = salary ~ yrs.since.phd)
ggplot(data, aes(salary, yrs.since.phd)) +
geom_point() +
geom_smooth(method = "lm", formula = salary ~ yrs.since.phd)
ggplot(data, aes(salary, yrs.since.phd)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data, aes(salary, yrs.since.phd)) +
geom_point() +
geom_smooth(method = "lm")
## e) Next, fit a model of salary including 'years since PhD' and discipline as predictors, store it in lm2
lm2 <- lm(salary ~ yrs.since.phd + discipline, data = data)
summary(lm1)
anova(lm1)
summary(lm2)
anova(lm2)
summary(lm2)
anova(lm2)
## e) Next, fit a model of salary including 'years since PhD' and discipline as predictors, store it in lm2
lm2 <- lm(salary ~ yrs.since.phd * discipline, data = data)
## f) Report and explain the effects of 'years since PhD' and discipline.
summary(lm2)
anova(lm2)
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = descipline)) + geom_point()
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, fill = descipline)) + geom_point()
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, fill = discipline)) + geom_point()
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) + geom_point()
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) + geom_point() +geom_line(color='red',data = sal_pred)
data$sal_pred = fitted(lm2)
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) + geom_point() +geom_line(color='red',data = sal_pred)
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) + geom_point() +geom_line(color='red',data = sal_pred)
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) + geom_point() +geom_line(color='red',data = data$sal_pred)
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) + geom_point() +geom_line(color='red',data = data, aes(sal_pred))
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) + geom_point() +geom_smooth(color='red',data = data, aes(sal_pred))
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(color = 'red', method = "lm", data = data$sal_pred )
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(color = "blue", method = "lm"  )
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(color = "blue", method = "lm"  ) +
geom_smooth(color = "orange", method = "lm")
?fitted
View(data)
View(data)
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(color = "blue", method = "lm") +
geom_smooth(color = "orange", aes(sal_pred))
lm2 <- lm(salary ~ yrs.since.phd + discipline, data = data)
## f) Report and explain the effects of 'years since PhD' and discipline.
summary(lm2)
anova(lm2)
# years since PhD and salary
# -> the same as before.
# years since PhD and discipline
# -> these predictors have no effect on each other (p-vale > 0.05)
# discipline and salary
# -> the discipline (in gerneal, regardless of the level) has an effect on the salary (p-vale < 0.05)
# -> discipline B has no significant effect on the salary (p-value = 0.17 > alpha), thus discipline A must have an effect.
##  Next we want to plot a model where both predictors are shown. For those we first store the predicted values
## of our model:
data$sal_pred = fitted(lm2)
## g) Now, plot the original data (salary by 'years since PhD' with different colors for disicpline), but use the
## fitted values (sal_pred) inside geom_smooth() or geom_line(), otherwise, it will display regression lines
## assuming an interaction
## The resulting plot should show the data points in different colors and two parallel regression lines.
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(color = "blue", method = "lm") +
geom_smooth(color = "orange", aes(sal_pred))
## h) Run a regression model that includes also the interaction
# between 'years since PhD' and discipline and store it as lm3
lm3 <-  lm(salary ~ yrs.since.phd * discipline, data = data)
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = discipline))
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = discipline), alpha = 0.1)
ggplot(data, aes(salary, yrs.since.phd, color = discipline)) +
geom_point() +
geom_smooth(method = "lm", aes(fill = discipline), alpha = 0.1)
summary(lm3)
anova(lm3)
par(mfcol=c(2,3))
plot(lm3, which=seq(1,6))
